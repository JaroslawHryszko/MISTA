#Test code generated by MISTA

import json
import urllib
import httplib
from scapy.all import *

import unittest

import os, sys, socket, struct, select, time 
from threading import Thread

import logging
import traceback

from mininet.net import Mininet
from mininet.node import OVSSwitch, OVSKernelSwitch, Controller, RemoteController
from mininet.log import setLogLevel, info
from mininet.cli import CLI



class FirewallTester_RT( unittest.TestCase):

	
	
	def setUp(self):
	        	self.controllerIp="127.0.0.1"
			self.switch = "00:00:00:00:00:00:00:01"
			self.destinationIp = "10.0.0.1"
			self.startTime_ = time.time()
			self.failed = False
			self.reportStatus_ = True
			self.name_ = "Firewall"
			self.log = logging.getLogger("unittest")
	
			self.CreateNet()
	
			Precondition.SetPreconditionS1(self)
			Postcondition.CheckConditionS1(self)

	def tearDown(self):
			if self.failed:
				return
			duration = time.time() - self.startTime_
			self.cleanup(True)
			if self.reportStatus_:
				self.log.info("=== Test %s completed normally (%d sec)", self.name_, duration)


	#1	
	def EnableFirewall(self):
		command = "http://%s:8080/wm/firewall/module/enable/json" % self.controllerIp
	  	urllib.urlopen(command)	
		# sleep to time out previous flows in switches
	  	#time.sleep(5)			
	
	#2	
	def DisableFirewall(self):
		command = "http://%s:8080/wm/firewall/module/disable/json" % self.controllerIp
	  	urllib.urlopen(command)
		
		# sleep to time out previous flows in switches
	  	#time.sleep(5)
	
	
	
	
	def test1(self) :
		print "Test case 1"
		EnableFirewall(self)
		self.assertTrue(checkfirewallEnabled(self))
		self.assertTrue(CheckFirewallTable("firewallRule1"))
		self.assertTrue(CheckFlow("flowRule1"))
		DisableFirewall(self)
		self.assertTrue(checkfirewallDisabled(self))
		self.assertTrue(CheckFirewallTable("firewallRule1"))
		self.assertTrue(CheckFlow("flowRule1"))
	

	def test2(self) :
		print "Test case 2"
		EnableFirewall(self)
		addFlow(self)
		self.assertTrue(checkfirewallEnabled(self))
		self.assertTrue(CheckFirewallTable("firewallRule1"))
		self.assertTrue(CheckFlow("flowRule1"))
		self.assertTrue(CheckFlow(FlowRule))
		insertFlowRuleNoFirewallRules()
		self.assertTrue(CheckFirewallTable("firewallRule1"))
		self.assertTrue(flowTable(FlowRule, 1))
		self.assertTrue(CheckFlow("flowRule1"))
		addFlow(self)
		self.assertTrue(CheckFirewallTable("firewallRule1"))
		self.assertTrue(flowTable(FlowRule, 1))
		self.assertTrue(CheckFlow("flowRule1"))
		self.assertTrue(CheckFlow(FlowRule))
		addFlow(self)
		self.assertTrue(CheckFirewallTable("firewallRule1"))
		self.assertTrue(flowTable(FlowRule, 1))
		self.assertTrue(CheckFlow("flowRule1"))
		self.assertTrue(CheckFlow(FlowRule))
	

	def test3(self) :
		print "Test case 3"
		EnableFirewall(self)
		addFlow(self)
		insertFlowRuleNoFirewallRules()
		addFlow(self)
		deleteFirewallRule("firewallRule1", self)
		self.assertTrue(flowTable(FlowRule, 1))
		self.assertTrue(CheckFlow("flowRule1"))
		self.assertTrue(CheckFlow(FlowRule))
		addFlow(self)
		self.assertTrue(flowTable(FlowRule, 1))
		self.assertTrue(CheckFlow("flowRule1"))
		self.assertTrue(CheckFlow(FlowRule))
	

	def test4(self) :
		print "Test case 4"
		EnableFirewall(self)
		addFlow(self)
		insertFlowRuleNoFirewallRules()
		addFlow(self)
		checkMatch("firewallRule1")
		self.assertTrue(flowTable(FlowRule, 1))
		self.assertTrue(CheckFlow("flowRule1"))
		self.assertTrue(MatchType(FlowRule, "firewallRule1"))
		addFlow(self)
		self.assertTrue(flowTable(FlowRule, 1))
		self.assertTrue(CheckFlow("flowRule1"))
		self.assertTrue(CheckFlow(FlowRule))
		self.assertTrue(MatchType(FlowRule, "firewallRule1"))
		addFlow(self)
		self.assertTrue(flowTable(FlowRule, 1))
		self.assertTrue(CheckFlow("flowRule1"))
		self.assertTrue(CheckFlow(FlowRule))
		self.assertTrue(MatchType(FlowRule, "firewallRule1"))
	

	def test5(self) :
		print "Test case 5"
		EnableFirewall(self)
		addFlow(self)
		insertFlowRuleNoFirewallRules()
		deleteFirewallRule("firewallRule1", self)
		self.assertTrue(flowTable(FlowRule, 1))
		self.assertTrue(CheckFlow("flowRule1"))
		addFlow(self)
		self.assertTrue(flowTable(FlowRule, 1))
		self.assertTrue(CheckFlow("flowRule1"))
		self.assertTrue(CheckFlow(FlowRule))
	

	def test6(self) :
		print "Test case 6"
		EnableFirewall(self)
		addFlow(self)
		DisableFirewall(self)
		self.assertTrue(checkfirewallDisabled(self))
		self.assertTrue(CheckFirewallTable("firewallRule1"))
		self.assertTrue(CheckFlow("flowRule1"))
		self.assertTrue(CheckFlow(FlowRule))
	

	def test7(self) :
		print "Test case 7"
		EnableFirewall(self)
		addFlow(self)
		addFlow(self)
		self.assertTrue(checkfirewallEnabled(self))
		self.assertTrue(CheckFirewallTable("firewallRule1"))
		self.assertTrue(CheckFlow("flowRule1"))
		self.assertTrue(CheckFlow(FlowRule))
	

	def test8(self) :
		print "Test case 8"
		EnableFirewall(self)
		addFlow(self)
		deleteFirewallRule("firewallRule1", self)
		self.assertTrue(checkfirewallEnabled(self))
		self.assertTrue(CheckFlow("flowRule1"))
		self.assertTrue(CheckFlow(FlowRule))
		insertFlowRuleNoFirewallRules()
		self.assertTrue(flowTable(FlowRule, 1))
		self.assertTrue(CheckFlow("flowRule1"))
	

	def test9(self) :
		print "Test case 9"
		EnableFirewall(self)
		addFlow(self)
		deleteFirewallRule("firewallRule1", self)
		DisableFirewall(self)
		self.assertTrue(checkfirewallDisabled(self))
		self.assertTrue(CheckFlow("flowRule1"))
		self.assertTrue(CheckFlow(FlowRule))
	

	def test10(self) :
		print "Test case 10"
		EnableFirewall(self)
		addFlow(self)
		deleteFirewallRule("firewallRule1", self)
		addFlow(self)
		self.assertTrue(checkfirewallEnabled(self))
		self.assertTrue(CheckFlow("flowRule1"))
		self.assertTrue(CheckFlow(FlowRule))
	

	def test11(self) :
		print "Test case 11"
		EnableFirewall(self)
		addFlow(self)
		checkMatch("firewallRule1")
		self.assertTrue(checkfirewallEnabled(self))
		self.assertTrue(CheckFlow("flowRule1"))
		self.assertTrue(MatchType(FlowRule, "firewallRule1"))
		insertFlowRuleCheckFirewallInclusiveMatch("firewallRule1")
		self.assertTrue(flowTable(FlowRule, 1))
		self.assertTrue(CheckFlow("flowRule1"))
	

	def test12(self) :
		print "Test case 12"
		EnableFirewall(self)
		addFlow(self)
		checkMatch("firewallRule1")
		DisableFirewall(self)
		self.assertTrue(checkfirewallDisabled(self))
		self.assertTrue(CheckFlow("flowRule1"))
		self.assertTrue(MatchType(FlowRule, "firewallRule1"))
	

	def test13(self) :
		print "Test case 13"
		EnableFirewall(self)
		addFlow(self)
		checkMatch("firewallRule1")
		addFlow(self)
		self.assertTrue(checkfirewallEnabled(self))
		self.assertTrue(CheckFlow("flowRule1"))
		self.assertTrue(CheckFlow(FlowRule))
		self.assertTrue(MatchType(FlowRule, "firewallRule1"))
		insertFlowRuleNoFirewallRules()
		self.assertTrue(flowTable(FlowRule, 1))
		self.assertTrue(CheckFlow("flowRule1"))
		self.assertTrue(MatchType(FlowRule, "firewallRule1"))
	

	def test14(self) :
		print "Test case 14"
		EnableFirewall(self)
		addFlow(self)
		checkMatch("firewallRule1")
		addFlow(self)
		insertFlowRuleCheckFirewallInclusiveMatch("firewallRule1")
		self.assertTrue(flowTable(FlowRule, 1))
		self.assertTrue(CheckFlow("flowRule1"))
		self.assertTrue(CheckFlow(FlowRule))
	

	def test15(self) :
		print "Test case 15"
		EnableFirewall(self)
		addFlow(self)
		checkMatch("firewallRule1")
		addFlow(self)
		DisableFirewall(self)
		self.assertTrue(checkfirewallDisabled(self))
		self.assertTrue(CheckFlow("flowRule1"))
		self.assertTrue(CheckFlow(FlowRule))
		self.assertTrue(MatchType(FlowRule, "firewallRule1"))
	

	def test16(self) :
		print "Test case 16"
		EnableFirewall(self)
		addFlow(self)
		checkMatch("firewallRule1")
		addFlow(self)
		addFlow(self)
		self.assertTrue(checkfirewallEnabled(self))
		self.assertTrue(CheckFlow("flowRule1"))
		self.assertTrue(CheckFlow(FlowRule))
		self.assertTrue(MatchType(FlowRule, "firewallRule1"))
	

	def test17(self) :
		print "Test case 17"
		EnableFirewall(self)
		addFlow(self)
		checkMatch("firewallRule1")
		addFlow(self)
		insertFlowRuleCheckFirewallWoutMatch("firewallRule1")
		self.assertTrue(flowTable(FlowRule, 1))
		self.assertTrue(CheckFlow("flowRule1"))
		self.assertTrue(CheckFlow(FlowRule))
	

	def test18(self) :
		print "Test case 18"
		EnableFirewall(self)
		addFlow(self)
		checkMatch("firewallRule1")
		insertFlowRuleCheckFirewallWoutMatch("firewallRule1")
		self.assertTrue(flowTable(FlowRule, 1))
		self.assertTrue(CheckFlow("flowRule1"))
	

	def test19(self) :
		print "Test case 19"
		EnableFirewall(self)
		deleteFirewallRule("firewallRule1", self)
		self.assertTrue(checkfirewallEnabled(self))
		self.assertTrue(CheckFlow("flowRule1"))
		DisableFirewall(self)
		self.assertTrue(checkfirewallDisabled(self))
		self.assertTrue(CheckFlow("flowRule1"))
	

	def test20(self) :
		print "Test case 20"
		EnableFirewall(self)
		deleteFirewallRule("firewallRule1", self)
		addFlow(self)
		self.assertTrue(checkfirewallEnabled(self))
		self.assertTrue(CheckFlow("flowRule1"))
		self.assertTrue(CheckFlow(FlowRule))
	

	def test21(self) :
		print "Test case 21"
		addFlow(self)
		self.assertTrue(checkfirewallDisabled(self))
		self.assertTrue(CheckFirewallTable("firewallRule1"))
		self.assertTrue(CheckFlow("flowRule1"))
		self.assertTrue(CheckFlow(FlowRule))
		EnableFirewall(self)
		self.assertTrue(checkfirewallEnabled(self))
		self.assertTrue(CheckFirewallTable("firewallRule1"))
		self.assertTrue(CheckFlow("flowRule1"))
		self.assertTrue(CheckFlow(FlowRule))
	

	def test22(self) :
		print "Test case 22"
		addFlow(self)
		insertFlowRuleFirewallOff(self)
		self.assertTrue(CheckFirewallTable("firewallRule1"))
		self.assertTrue(flowTable(FlowRule, 0))
		self.assertTrue(CheckFlow("flowRule1"))
		addFlow(self)
		self.assertTrue(CheckFirewallTable("firewallRule1"))
		self.assertTrue(flowTable(FlowRule, 0))
		self.assertTrue(CheckFlow("flowRule1"))
		self.assertTrue(CheckFlow(FlowRule))
		addFlow(self)
		self.assertTrue(CheckFirewallTable("firewallRule1"))
		self.assertTrue(flowTable(FlowRule, 0))
		self.assertTrue(CheckFlow("flowRule1"))
		self.assertTrue(CheckFlow(FlowRule))
	

	def test23(self) :
		print "Test case 23"
		addFlow(self)
		insertFlowRuleFirewallOff(self)
		addFlow(self)
		deleteFirewallRule("firewallRule1", self)
		self.assertTrue(flowTable(FlowRule, 0))
		self.assertTrue(CheckFlow("flowRule1"))
		self.assertTrue(CheckFlow(FlowRule))
		addFlow(self)
		self.assertTrue(flowTable(FlowRule, 0))
		self.assertTrue(CheckFlow("flowRule1"))
		self.assertTrue(CheckFlow(FlowRule))
	

	def test24(self) :
		print "Test case 24"
		addFlow(self)
		insertFlowRuleFirewallOff(self)
		addFlow(self)
		checkMatch("firewallRule1")
		self.assertTrue(flowTable(FlowRule, 0))
		self.assertTrue(CheckFlow("flowRule1"))
		self.assertTrue(MatchType(FlowRule, "firewallRule1"))
		addFlow(self)
		self.assertTrue(flowTable(FlowRule, 0))
		self.assertTrue(CheckFlow("flowRule1"))
		self.assertTrue(CheckFlow(FlowRule))
		self.assertTrue(MatchType(FlowRule, "firewallRule1"))
		addFlow(self)
		self.assertTrue(flowTable(FlowRule, 0))
		self.assertTrue(CheckFlow("flowRule1"))
		self.assertTrue(CheckFlow(FlowRule))
		self.assertTrue(MatchType(FlowRule, "firewallRule1"))
	

	def test25(self) :
		print "Test case 25"
		addFlow(self)
		insertFlowRuleFirewallOff(self)
		deleteFirewallRule("firewallRule1", self)
		self.assertTrue(flowTable(FlowRule, 0))
		self.assertTrue(CheckFlow("flowRule1"))
		addFlow(self)
		self.assertTrue(flowTable(FlowRule, 0))
		self.assertTrue(CheckFlow("flowRule1"))
		self.assertTrue(CheckFlow(FlowRule))
	

	def test26(self) :
		print "Test case 26"
		addFlow(self)
		addFlow(self)
		self.assertTrue(checkfirewallDisabled(self))
		self.assertTrue(CheckFirewallTable("firewallRule1"))
		self.assertTrue(CheckFlow("flowRule1"))
		self.assertTrue(CheckFlow(FlowRule))
	

	def test27(self) :
		print "Test case 27"
		addFlow(self)
		deleteFirewallRule("firewallRule1", self)
		self.assertTrue(checkfirewallDisabled(self))
		self.assertTrue(CheckFlow("flowRule1"))
		self.assertTrue(CheckFlow(FlowRule))
		EnableFirewall(self)
		self.assertTrue(checkfirewallEnabled(self))
		self.assertTrue(CheckFlow("flowRule1"))
		self.assertTrue(CheckFlow(FlowRule))
	

	def test28(self) :
		print "Test case 28"
		addFlow(self)
		deleteFirewallRule("firewallRule1", self)
		insertFlowRuleFirewallOff(self)
		self.assertTrue(flowTable(FlowRule, 0))
		self.assertTrue(CheckFlow("flowRule1"))
	

	def test29(self) :
		print "Test case 29"
		addFlow(self)
		deleteFirewallRule("firewallRule1", self)
		addFlow(self)
		self.assertTrue(checkfirewallDisabled(self))
		self.assertTrue(CheckFlow("flowRule1"))
		self.assertTrue(CheckFlow(FlowRule))
	

	def test30(self) :
		print "Test case 30"
		addFlow(self)
		checkMatch("firewallRule1")
		self.assertTrue(checkfirewallDisabled(self))
		self.assertTrue(CheckFlow("flowRule1"))
		self.assertTrue(MatchType(FlowRule, "firewallRule1"))
		EnableFirewall(self)
		self.assertTrue(checkfirewallEnabled(self))
		self.assertTrue(CheckFlow("flowRule1"))
		self.assertTrue(MatchType(FlowRule, "firewallRule1"))
	

	def test31(self) :
		print "Test case 31"
		addFlow(self)
		checkMatch("firewallRule1")
		addFlow(self)
		self.assertTrue(checkfirewallDisabled(self))
		self.assertTrue(CheckFlow("flowRule1"))
		self.assertTrue(CheckFlow(FlowRule))
		self.assertTrue(MatchType(FlowRule, "firewallRule1"))
		EnableFirewall(self)
		self.assertTrue(checkfirewallEnabled(self))
		self.assertTrue(CheckFlow("flowRule1"))
		self.assertTrue(CheckFlow(FlowRule))
		self.assertTrue(MatchType(FlowRule, "firewallRule1"))
	

	def test32(self) :
		print "Test case 32"
		addFlow(self)
		checkMatch("firewallRule1")
		addFlow(self)
		insertFlowRuleFirewallOff(self)
		self.assertTrue(flowTable(FlowRule, 0))
		self.assertTrue(CheckFlow("flowRule1"))
		self.assertTrue(MatchType(FlowRule, "firewallRule1"))
	

	def test33(self) :
		print "Test case 33"
		addFlow(self)
		checkMatch("firewallRule1")
		addFlow(self)
		addFlow(self)
		self.assertTrue(checkfirewallDisabled(self))
		self.assertTrue(CheckFlow("flowRule1"))
		self.assertTrue(CheckFlow(FlowRule))
		self.assertTrue(MatchType(FlowRule, "firewallRule1"))
	

	def test34(self) :
		print "Test case 34"
		deleteFirewallRule("firewallRule1", self)
		self.assertTrue(checkfirewallDisabled(self))
		self.assertTrue(CheckFlow("flowRule1"))
		EnableFirewall(self)
		self.assertTrue(checkfirewallEnabled(self))
		self.assertTrue(CheckFlow("flowRule1"))
	

	def test35(self) :
		print "Test case 35"
		deleteFirewallRule("firewallRule1", self)
		addFlow(self)
		self.assertTrue(checkfirewallDisabled(self))
		self.assertTrue(CheckFlow("flowRule1"))
		self.assertTrue(CheckFlow(FlowRule))
	

	
if __name__ == '__main__':
	suite = unittest.TestSuite()
	suite.addTest(FirewallTester_RT("test1"))
	suite.addTest(FirewallTester_RT("test2"))
	suite.addTest(FirewallTester_RT("test3"))
	suite.addTest(FirewallTester_RT("test4"))
	suite.addTest(FirewallTester_RT("test5"))
	suite.addTest(FirewallTester_RT("test6"))
	suite.addTest(FirewallTester_RT("test7"))
	suite.addTest(FirewallTester_RT("test8"))
	suite.addTest(FirewallTester_RT("test9"))
	suite.addTest(FirewallTester_RT("test10"))
	suite.addTest(FirewallTester_RT("test11"))
	suite.addTest(FirewallTester_RT("test12"))
	suite.addTest(FirewallTester_RT("test13"))
	suite.addTest(FirewallTester_RT("test14"))
	suite.addTest(FirewallTester_RT("test15"))
	suite.addTest(FirewallTester_RT("test16"))
	suite.addTest(FirewallTester_RT("test17"))
	suite.addTest(FirewallTester_RT("test18"))
	suite.addTest(FirewallTester_RT("test19"))
	suite.addTest(FirewallTester_RT("test20"))
	suite.addTest(FirewallTester_RT("test21"))
	suite.addTest(FirewallTester_RT("test22"))
	suite.addTest(FirewallTester_RT("test23"))
	suite.addTest(FirewallTester_RT("test24"))
	suite.addTest(FirewallTester_RT("test25"))
	suite.addTest(FirewallTester_RT("test26"))
	suite.addTest(FirewallTester_RT("test27"))
	suite.addTest(FirewallTester_RT("test28"))
	suite.addTest(FirewallTester_RT("test29"))
	suite.addTest(FirewallTester_RT("test30"))
	suite.addTest(FirewallTester_RT("test31"))
	suite.addTest(FirewallTester_RT("test32"))
	suite.addTest(FirewallTester_RT("test33"))
	suite.addTest(FirewallTester_RT("test34"))
	suite.addTest(FirewallTester_RT("test35"))
	unittest.TextTestRunner(verbosity=2).run(suite)
	
